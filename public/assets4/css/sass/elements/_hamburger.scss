$hamburger-padding-x: 10px !default;
$hamburger-padding-y: 10px !default;
$hamburger-layer-width: 25px !default;
$hamburger-layer-height: 2px !default;
$hamburger-layer-spacing: 5px !default;
$hamburger-layer-color: $light-color !default;
$hamburger-sticky-color: $light-color !default;
$hamburger-layer-border-radius: 4px !default;
$hamburger-hover-opacity: 0.7 !default;
$hamburger-active-layer-color: $hamburger-layer-color !default;
$hamburger-active-hover-opacity: $hamburger-hover-opacity !default;
// To use CSS filters as the hover effect instead of opacity,
// set $hamburger-hover-use-filter as true and
// change the value of $hamburger-hover-filter accordingly.
$hamburger-hover-use-filter: false !default;
$hamburger-hover-filter: opacity(50%) !default;
$hamburger-active-hover-filter: $hamburger-hover-filter !default;
// Hamburger
// ==================================================

.hamburger {
    display: inline-block;
    margin: 0;
    padding: $hamburger-padding-y $hamburger-padding-x;
    overflow: visible;
    color: inherit;
    // Normalize (<button>)
    font: inherit;
    text-transform: none;
    background-color: transparent;
    border: 0;
    cursor: pointer;
    transition-timing-function: linear;
    transition-duration: 0.15s;
    transition-property: opacity, filter;

    &:hover {

        @if $hamburger-hover-use-filter == true {
            filter: $hamburger-hover-filter;
        } @else {
            opacity: $hamburger-hover-opacity;
        }
    }

    &.is-active {

        &:hover {

            @if $hamburger-hover-use-filter == true {
                filter: $hamburger-active-hover-filter;
            } @else {
                opacity: $hamburger-active-hover-opacity;
            }
        }

        .hamburger-inner,
        .hamburger-inner::after,
        .hamburger-inner::before {
            background-color: $hamburger-active-layer-color;

            .sticky & {
                background-color: $hamburger-sticky-color;
            }
        }
    }
}

.hamburger-box {
    position: relative;
    display: inline-block;
    width: $hamburger-layer-width;
    height: $hamburger-layer-height * 3 + $hamburger-layer-spacing * 2;
}

.hamburger-inner {
    top: 50%;
    display: block;
    margin-top: $hamburger-layer-height / -2;

    &,
    &::after,
    &::before {
        position: absolute;
        width: $hamburger-layer-width;
        height: $hamburger-layer-height;
        background-color: $hamburger-layer-color;
        border-radius: $hamburger-layer-border-radius;
        transition-timing-function: ease;
        transition-duration: 0.15s;
        transition-property: transform;

        .sticky & {
            background-color: $hamburger-sticky-color;
        }
    }

    &::after,
    &::before {
        display: block;
        content: "";
    }

    &::before {
        top: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }

    &::after {
        bottom: ($hamburger-layer-spacing + $hamburger-layer-height) * -1;
    }
}

.hamburger--slider {

    .hamburger-inner {
        top: $hamburger-layer-height / 2;

        &::before {
            top: $hamburger-layer-height + $hamburger-layer-spacing;
            transition-timing-function: ease;
            transition-duration: 0.15s;
            transition-property: transform, opacity;
        }

        &::after {
            top: ($hamburger-layer-height * 2) + ($hamburger-layer-spacing * 2);
        }
    }

    &.is-active {

        .hamburger-inner {
            $y-offset: $hamburger-layer-spacing + $hamburger-layer-height;
            transform: translate3d(0, $y-offset, 0) rotate(45deg);

            &::before {
                transform:
                    rotate(-45deg)
                    translate3d($hamburger-layer-width / -7, $hamburger-layer-spacing * -1, 0);
                opacity: 0;
            }

            &::after {
                transform: translate3d(0, $y-offset * -2, 0) rotate(-90deg);
            }
        }
    }
}
